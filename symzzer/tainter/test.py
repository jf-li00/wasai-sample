import json
import pickle

from symzzer.tainter.wasabiHooker import Wasabi
import symzzer.tainter.utils as utils

'''
  # CMD @ cleos push action hello payme '{"user": "hello", "from": "hello", 
  #     "to": "hello", "quantity": "329.3826 EOS", "memo": "mw", "key": -589557426}' -p hello@active
  *************
  # Source Code:
  void payme( name user, name from, name to,  asset quantity, std::string memo, int key ) {
      if (key == 2){
        print( "try to transfer to:",name{user});
    ...
  # Lowlevel Log
    [76845325, "call_indirect", [44, 121, 3, 
                                8184, 
                                0, 1789073920, 
                                0, 1789073920, 
                                0, 1789073920, 
                                7872, 7936, 3705409870], 
                ["I32", "I64", "I64", "I64", "I32", "I32", "I32"]]

    [175, \"begin_function\" ,[38,4294967295],[]],
    [275,\"global.get\",[38,0,0,7872],[\"I32\"]],
    [23,\"i32.const\",[38,1,128],[]] ,
    [130,\"i32.sub\",[38,2,7872,128,7744],[]],
    [274,\"local.tee\",[38,3,7,7744],[\"I32\"]],
    [276,\"global.set\",[38,4,0,7744],[\"I32\"]],
    [176,\"begin_block\",[38,5],[]],
    [272,\"local.get\",[38,6,6,3705409870],[\"I32\"]],
    [23,\"i32.const\",[38,7,2],[]],
    [98,\"i32.ne\",[38,8,3705409870,2,1],[]],
    [9,\"br_if\",[38,9,1,0,437],[]],
    [181,\"end_block\",[38,437,5],[]],
    [272,\"local.get\",[38,438,7,7744],[\"I32\"]],
    [23,\"i32.const\",[38,439,128],[]],
    [129,\"i32.add\",[38,440,7744,128,,7872],[]],
    [276,\"global.set\",[38,441,0,7872],[\"I32\"]],
    [11,\"return\",[38,4294967295],[]],
    [180,\"end_function\",[38,442],[]] 
'''

# logSample = [
#     [76845325, "call_indirect", [44, 121, 3, 8184, 0, 1789073920, 0, 1789073920, 0,
#                                  1789073920, 7872, 7936, 3705409870], ["I32", "I64", "I64", "I64", "I32", "I32", "I32"]],
#     [175, "begin_function", [38, 4294967295], []],
#     [275, "global.get", [38, 0, 0, 7872], ["I32"]],
#     [23, "i32.const", [38, 1, 128], []],
#     [130, "i32.sub", [38, 2, 7872, 128, 7744], []],
#     [274, "local.tee", [38, 3, 7, 7744], ["I32"]],
#     [276, "global.set", [38, 4, 0, 7744], ["I32"]],
#     [176, "begin_block", [38, 5], []],
#     [272, "local.get", [38, 6, 6, 3705409870], ["I32"]],
#     [23, "i32.const", [38, 7, 2], []],
#     [98, "i32.ne", [38, 8, 3705409870, 2, 1], []],
#     [9, "br_if", [38, 9, 1, 0, 437], []],
#     [181, "end_block", [38, 437, 5], []],
#     [272, "local.get", [38, 438, 7, 7744], ["I32"]],
#     [23, "i32.const", [38, 439, 128], []],
#     [129, "i32.add", [38, 440, 7744, 128, 7872], []],
#     [276, "global.set", [38, 441, 0, 7872], ["I32"]],
#     [11, "return", [38, 4294967295], []],
#     [180, "end_function", [38, 442], []]]
# f = open('../log.json', 'rb')
# # logSample = pickle.load(f)
# f.close()

libFunc = ["action_data_size",
           "read_action_data",
           "eosio_assert",
           "memcpy",
           "prints",
           "set_blockchain_parameters_packed",
           "get_blockchain_parameters_packed",
           "memset"]

inputType = ['I32', 'asset']

# logSample = [
#     [76845325, "call_indirect", [44, 121, 3, 8184, 0, 1789073920, 0, 1789073920, 0,
#                                  1789073920, 7872, 7936, 3705409870], ["I32", "I64", "I64", "I64", "I32", "I32", "I32"]],
#     [175, "begin_function", [38, 4294967295], []],
#     [23, "i32.const", [38, 1, 100], []],
#     [272, "local.get", [38, 0, 6, 3705409870], ["I32"]],
#     [0, "i32.store", [38, 2, 0, 4, 100, 3705409870], []],
#     [23, "i32.const", [38, 3, 100], []],
#     [0, "i32.load", [38, 4, 0, 4, 100, 3705409870], []],
#     [23, "i32.const", [38, 7, 100098], []],
#     [98, "i32.ne", [38, 8, 3705409870, 2, 1], []],
#     [9, "br_if", [38, 9, 1, 0, 437], []],
# ]

logSample = [
    [2317, 'call_indirect', [13, 140, 2, 8184, 8064], ['I32', 'I32']],
    [175, 'begin_function', [12, 4294967295], []],
    [23, 'i32.const', [12, 0, 1], ['I32']],
    [23, 'i32.const', [12, 1, 8341], ['I32']],
    [2316, 'call', [12, 2, 2, 1, 8341], ['I32', 'I32']],
    [174, 'call_post', [12, 2], []],
    [24, 'i64.const', [12, 3, 5459781, 0], ['I64']],
    [529, 'local.set', [12, 4, 2, 5459781, 0], ['I64']],
    [23, 'i32.const', [12, 5, 0], ['I32']],
    [273, 'local.set', [12, 6, 3, 0], ['I32']],
    [176, 'begin_block', [12, 7], []],
    [176, 'begin_block', [12, 8], []],
    [177, 'begin_loop', [12, 9], []],
    [528, 'local.get', [12, 10, 2, 5459781, 0], ['I64']],
    [72, 'i32.wrap_i64', [12, 11, 5459781, 0, 5459781], ['I64', 'I32']],
    [23, 'i32.const', [12, 12, 24], ['I32']],
    [139, 'i32.shl', [12, 13, 5459781, 24, 1157627904], ['I32', 'I32', 'I32']],
    [23, 'i32.const', [12, 14, 3221225471], ['I32']],
    [129, 'i32.add', [12, 15, 1157627904, 3221225471, 83886079], ['I32', 'I32', 'I32']],
    [23, 'i32.const', [12, 16, 452984830], ['I32']],
    [102, 'i32.gt_u', [12, 17, 83886079, 452984830, 0], ['I32', 'I32', 'I32']],
    [9, 'br_if', [12, 18, 0, 1, 82], ['I32', 'I32', 'I32']],
    [528, 'local.get', [12, 19, 2, 5459781, 0], ['I64']],
    [24, 'i64.const', [12, 20, 8, 0], ['I64']],
    [156, 'i64.shr_u', [12, 21, 5459781, 0, 8, 0, 21327, 0], ['I64', 'I64', 'I64']],
    [529, 'local.set', [12, 22, 4, 21327, 0], ['I64']],
    [176, 'begin_block', [12, 23], []],
    [528, 'local.get', [12, 24, 2, 5459781, 0], ['I64']],
    [24, 'i64.const', [12, 25, 65280, 0], ['I64']],
    [151, 'i64.and', [12, 26, 5459781, 0, 65280, 0, 20224, 0], ['I64', 'I64', 'I64']],
    [24, 'i64.const', [12, 27, 0, 0], ['I64']],
    [107, 'i64.eq', [12, 28, 20224, 0, 0, 0, 0], ['I64', 'I64', 'I32']],
    [9, 'br_if', [12, 29, 0, 0, 44], ['I32', 'I32', 'I32']],
    [528, 'local.get', [12, 30, 4, 21327, 0], ['I64']],
    [529, 'local.set', [12, 31, 2, 21327, 0], ['I64']],
    [23, 'i32.const', [12, 32, 1], ['I32']],
    [273, 'local.set', [12, 33, 5, 1], ['I32']],
    [272, 'local.get', [12, 34, 3, 0], ['I32']],
    [274, 'local.tee', [12, 35, 6, 0], ['I32']],
    [23, 'i32.const', [12, 36, 1], ['I32']],
    [129, 'i32.add', [12, 37, 0, 1, 1], ['I32', 'I32', 'I32']],
    [273, 'local.set', [12, 38, 3, 1], ['I32']],
    [272, 'local.get', [12, 39, 6, 0], ['I32']],
    [23, 'i32.const', [12, 40, 6], ['I32']],
    [99, 'i32.lt_s', [12, 41, 0, 6, 1], ['I32', 'I32', 'I32']],
    [9, 'br_if', [12, 42, 1, 1, 9], ['I32', 'I32', 'I32']],
    [181, 'end_block', [12, 44, 23], []],
    [182, 'end_loop', [12, 81, 9], []],
    [177, 'begin_loop', [12, 9], []],
    [528, 'local.get', [12, 10, 2, 21327, 0], ['I64']],
    [72, 'i32.wrap_i64', [12, 11, 21327, 0, 21327], ['I64', 'I32']],
    [23, 'i32.const', [12, 12, 24], ['I32']],
    [139, 'i32.shl', [12, 13, 21327, 24, 1325400064], ['I32', 'I32', 'I32']],
    [23, 'i32.const', [12, 14, 3221225471], ['I32']],
    [129, 'i32.add', [12, 15, 1325400064, 3221225471, 251658239], ['I32', 'I32', 'I32']],
    [23, 'i32.const', [12, 16, 452984830], ['I32']],
    [102, 'i32.gt_u', [12, 17, 251658239, 452984830, 0], ['I32', 'I32', 'I32']],
    [9, 'br_if', [12, 18, 0, 1, 82], ['I32', 'I32', 'I32']],
    [528, 'local.get', [12, 19, 2, 21327, 0], ['I64']],
    [24, 'i64.const', [12, 20, 8, 0], ['I64']],
    [156, 'i64.shr_u', [12, 21, 21327, 0, 8, 0, 83, 0], ['I64', 'I64', 'I64']],
    [529, 'local.set', [12, 22, 4, 83, 0], ['I64']],
    [176, 'begin_block', [12, 23], []],
    [528, 'local.get', [12, 24, 2, 21327, 0], ['I64']],
    [24, 'i64.const', [12, 25, 65280, 0], ['I64']],
    [151, 'i64.and', [12, 26, 21327, 0, 65280, 0, 21248, 0], ['I64', 'I64', 'I64']],
    [24, 'i64.const', [12, 27, 0, 0], ['I64']],
    [107, 'i64.eq', [12, 28, 21248, 0, 0, 0, 0], ['I64', 'I64', 'I32']],
    [9, 'br_if', [12, 29, 0, 0, 44], ['I32', 'I32', 'I32']],
    [528, 'local.get', [12, 30, 4, 83, 0], ['I64']],
    [529, 'local.set', [12, 31, 2, 83, 0], ['I64']],
    [23, 'i32.const', [12, 32, 1], ['I32']],
    [273, 'local.set', [12, 33, 5, 1], ['I32']],
    [272, 'local.get', [12, 34, 3, 1], ['I32']],
    [274, 'local.tee', [12, 35, 6, 1], ['I32']],
    [23, 'i32.const', [12, 36, 1], ['I32']],
    [129, 'i32.add', [12, 37, 1, 1, 2], ['I32', 'I32', 'I32']],
    [273, 'local.set', [12, 38, 3, 2], ['I32']],
    [272, 'local.get', [12, 39, 6, 1], ['I32']],
    [23, 'i32.const', [12, 40, 6], ['I32']],
    [99, 'i32.lt_s', [12, 41, 1, 6, 1], ['I32', 'I32', 'I32']],
    [9, 'br_if', [12, 42, 1, 1, 9], ['I32', 'I32', 'I32']],
    [181, 'end_block', [12, 44, 23], []],
    [182, 'end_loop', [12, 81, 9], []],
    [177, 'begin_loop', [12, 9], []],
    [528, 'local.get', [12, 10, 2, 83, 0], ['I64']],
    [72, 'i32.wrap_i64', [12, 11, 83, 0, 83], ['I64', 'I32']],
    [23, 'i32.const', [12, 12, 24], ['I32']],
    [139, 'i32.shl', [12, 13, 83, 24, 1392508928], ['I32', 'I32', 'I32']],
    [23, 'i32.const', [12, 14, 3221225471], ['I32']],
    [129, 'i32.add', [12, 15, 1392508928, 3221225471, 318767103], ['I32', 'I32', 'I32']],
    [23, 'i32.const', [12, 16, 452984830], ['I32']],
    [102, 'i32.gt_u', [12, 17, 318767103, 452984830, 0], ['I32', 'I32', 'I32']],
    [9, 'br_if', [12, 18, 0, 1, 82], ['I32', 'I32', 'I32']],
    [528, 'local.get', [12, 19, 2, 83, 0], ['I64']],
    [24, 'i64.const', [12, 20, 8, 0], ['I64']],
    [156, 'i64.shr_u', [12, 21, 83, 0, 8, 0, 0, 0], ['I64', 'I64', 'I64']],
    [529, 'local.set', [12, 22, 4, 0, 0], ['I64']],
    [176, 'begin_block', [12, 23], []],
    [528, 'local.get', [12, 24, 2, 83, 0], ['I64']],
    [24, 'i64.const', [12, 25, 65280, 0], ['I64']],
    [151, 'i64.and', [12, 26, 83, 0, 65280, 0, 0, 0], ['I64', 'I64', 'I64']],
    [24, 'i64.const', [12, 27, 0, 0], ['I64']],
    [107, 'i64.eq', [12, 28, 0, 0, 0, 0, 1], ['I64', 'I64', 'I32']],
    [9, 'br_if', [12, 29, 1, 0, 44], ['I32', 'I32', 'I32']],
    [181, 'end_block', [12, 44, 23], []],
    [528, 'local.get', [12, 45, 4, 0, 0], ['I64']],
    [529, 'local.set', [12, 46, 2, 0, 0], ['I64']],
    [177, 'begin_loop', [12, 47], []],
    [528, 'local.get', [12, 48, 2, 0, 0], ['I64']],
    [24, 'i64.const', [12, 49, 65280, 0], ['I64']],
    [151, 'i64.and', [12, 50, 0, 0, 65280, 0, 0, 0], ['I64', 'I64', 'I64']],
    [24, 'i64.const', [12, 51, 0, 0], ['I64']],
    [108, 'i64.ne', [12, 52, 0, 0, 0, 0, 0], ['I64', 'I64', 'I32']],
    [9, 'br_if', [12, 53, 0, 2, 82], ['I32', 'I32', 'I32']],
    [528, 'local.get', [12, 54, 2, 0, 0], ['I64']],
    [24, 'i64.const', [12, 55, 8, 0], ['I64']],
    [156, 'i64.shr_u', [12, 56, 0, 0, 8, 0, 0, 0], ['I64', 'I64', 'I64']],
    [529, 'local.set', [12, 57, 2, 0, 0], ['I64']],
    [272, 'local.get', [12, 58, 3, 2], ['I32']],
    [23, 'i32.const', [12, 59, 6], ['I32']],
    [99, 'i32.lt_s', [12, 60, 2, 6, 1], ['I32', 'I32', 'I32']],
    [273, 'local.set', [12, 61, 5, 1], ['I32']],
    [272, 'local.get', [12, 62, 3, 2], ['I32']],
    [23, 'i32.const', [12, 63, 1], ['I32']],
    [129, 'i32.add', [12, 64, 2, 1, 3], ['I32', 'I32', 'I32']],
    [274, 'local.tee', [12, 65, 6, 3], ['I32']],
    [273, 'local.set', [12, 66, 3, 3], ['I32']],
    [272, 'local.get', [12, 67, 5, 1], ['I32']],
    [9, 'br_if', [12, 68, 1, 0, 47], ['I32', 'I32', 'I32']],
    [182, 'end_loop', [12, 69, 47], []],
    [177, 'begin_loop', [12, 47], []],
    [528, 'local.get', [12, 48, 2, 0, 0], ['I64']],
    [24, 'i64.const', [12, 49, 65280, 0], ['I64']],
    [151, 'i64.and', [12, 50, 0, 0, 65280, 0, 0, 0], ['I64', 'I64', 'I64']],
    [24, 'i64.const', [12, 51, 0, 0], ['I64']],
    [108, 'i64.ne', [12, 52, 0, 0, 0, 0, 0], ['I64', 'I64', 'I32']],
    [9, 'br_if', [12, 53, 0, 2, 82], ['I32', 'I32', 'I32']],
    [528, 'local.get', [12, 54, 2, 0, 0], ['I64']],
    [24, 'i64.const', [12, 55, 8, 0], ['I64']],
    [156, 'i64.shr_u', [12, 56, 0, 0, 8, 0, 0, 0], ['I64', 'I64', 'I64']],
    [529, 'local.set', [12, 57, 2, 0, 0], ['I64']],
    [272, 'local.get', [12, 58, 3, 3], ['I32']],
    [23, 'i32.const', [12, 59, 6], ['I32']],
    [99, 'i32.lt_s', [12, 60, 3, 6, 1], ['I32', 'I32', 'I32']],
    [273, 'local.set', [12, 61, 5, 1], ['I32']],
    [272, 'local.get', [12, 62, 3, 3], ['I32']],
    [23, 'i32.const', [12, 63, 1], ['I32']],
    [129, 'i32.add', [12, 64, 3, 1, 4], ['I32', 'I32', 'I32']],
    [274, 'local.tee', [12, 65, 6, 4], ['I32']],
    [273, 'local.set', [12, 66, 3, 4], ['I32']],
    [272, 'local.get', [12, 67, 5, 1], ['I32']],
    [9, 'br_if', [12, 68, 1, 0, 47], ['I32', 'I32', 'I32']],
    [182, 'end_loop', [12, 69, 47], []],
    [177, 'begin_loop', [12, 47], []],
    [528, 'local.get', [12, 48, 2, 0, 0], ['I64']],
    [24, 'i64.const', [12, 49, 65280, 0], ['I64']],
    [151, 'i64.and', [12, 50, 0, 0, 65280, 0, 0, 0], ['I64', 'I64', 'I64']],
    [24, 'i64.const', [12, 51, 0, 0], ['I64']],
    [108, 'i64.ne', [12, 52, 0, 0, 0, 0, 0], ['I64', 'I64', 'I32']],
    [9, 'br_if', [12, 53, 0, 2, 82], ['I32', 'I32', 'I32']],
    [528, 'local.get', [12, 54, 2, 0, 0], ['I64']],
    [24, 'i64.const', [12, 55, 8, 0], ['I64']],
    [156, 'i64.shr_u', [12, 56, 0, 0, 8, 0, 0, 0], ['I64', 'I64', 'I64']],
    [529, 'local.set', [12, 57, 2, 0, 0], ['I64']],
    [272, 'local.get', [12, 58, 3, 4], ['I32']],
    [23, 'i32.const', [12, 59, 6], ['I32']],
    [99, 'i32.lt_s', [12, 60, 4, 6, 1], ['I32', 'I32', 'I32']],
    [273, 'local.set', [12, 61, 5, 1], ['I32']],
    [272, 'local.get', [12, 62, 3, 4], ['I32']],
    [23, 'i32.const', [12, 63, 1], ['I32']],
    [129, 'i32.add', [12, 64, 4, 1, 5], ['I32', 'I32', 'I32']],
    [274, 'local.tee', [12, 65, 6, 5], ['I32']],
    [273, 'local.set', [12, 66, 3, 5], ['I32']],
    [272, 'local.get', [12, 67, 5, 1], ['I32']],
    [9, 'br_if', [12, 68, 1, 0, 47], ['I32', 'I32', 'I32']],
    [182, 'end_loop', [12, 69, 47], []],
    [177, 'begin_loop', [12, 47], []],
    [528, 'local.get', [12, 48, 2, 0, 0], ['I64']],
    [24, 'i64.const', [12, 49, 65280, 0], ['I64']],
    [151, 'i64.and', [12, 50, 0, 0, 65280, 0, 0, 0], ['I64', 'I64', 'I64']],
    [24, 'i64.const', [12, 51, 0, 0], ['I64']],
    [108, 'i64.ne', [12, 52, 0, 0, 0, 0, 0], ['I64', 'I64', 'I32']],
    [9, 'br_if', [12, 53, 0, 2, 82], ['I32', 'I32', 'I32']],
    [528, 'local.get', [12, 54, 2, 0, 0], ['I64']],
    [24, 'i64.const', [12, 55, 8, 0], ['I64']],
    [156, 'i64.shr_u', [12, 56, 0, 0, 8, 0, 0, 0], ['I64', 'I64', 'I64']],
    [529, 'local.set', [12, 57, 2, 0, 0], ['I64']],
    [272, 'local.get', [12, 58, 3, 5], ['I32']],
    [23, 'i32.const', [12, 59, 6], ['I32']],
    [99, 'i32.lt_s', [12, 60, 5, 6, 1], ['I32', 'I32', 'I32']],
    [273, 'local.set', [12, 61, 5, 1], ['I32']],
    [272, 'local.get', [12, 62, 3, 5], ['I32']],
    [23, 'i32.const', [12, 63, 1], ['I32']],
    [129, 'i32.add', [12, 64, 5, 1, 6], ['I32', 'I32', 'I32']],
    [274, 'local.tee', [12, 65, 6, 6], ['I32']],
    [273, 'local.set', [12, 66, 3, 6], ['I32']],
    [272, 'local.get', [12, 67, 5, 1], ['I32']],
    [9, 'br_if', [12, 68, 1, 0, 47], ['I32', 'I32', 'I32']],
    [182, 'end_loop', [12, 69, 47], []],
    [177, 'begin_loop', [12, 47], []],
    [528, 'local.get', [12, 48, 2, 0, 0], ['I64']],
    [24, 'i64.const', [12, 49, 65280, 0], ['I64']],
    [151, 'i64.and', [12, 50, 0, 0, 65280, 0, 0, 0], ['I64', 'I64', 'I64']],
    [24, 'i64.const', [12, 51, 0, 0], ['I64']],
    [108, 'i64.ne', [12, 52, 0, 0, 0, 0, 0], ['I64', 'I64', 'I32']],
    [9, 'br_if', [12, 53, 0, 2, 82], ['I32', 'I32', 'I32']],
    [528, 'local.get', [12, 54, 2, 0, 0], ['I64']],
    [24, 'i64.const', [12, 55, 8, 0], ['I64']],
    [156, 'i64.shr_u', [12, 56, 0, 0, 8, 0, 0, 0], ['I64', 'I64', 'I64']],
    [529, 'local.set', [12, 57, 2, 0, 0], ['I64']],
    [272, 'local.get', [12, 58, 3, 6], ['I32']],
    [23, 'i32.const', [12, 59, 6], ['I32']],
    [99, 'i32.lt_s', [12, 60, 6, 6, 0], ['I32', 'I32', 'I32']],
    [273, 'local.set', [12, 61, 5, 0], ['I32']],
    [272, 'local.get', [12, 62, 3, 6], ['I32']],
    [23, 'i32.const', [12, 63, 1], ['I32']],
    [129, 'i32.add', [12, 64, 6, 1, 7], ['I32', 'I32', 'I32']],
    [274, 'local.tee', [12, 65, 6, 7], ['I32']],
    [273, 'local.set', [12, 66, 3, 7], ['I32']],
    [272, 'local.get', [12, 67, 5, 0], ['I32']],
    [9, 'br_if', [12, 68, 0, 0, 47], ['I32', 'I32', 'I32']],
    [182, 'end_loop', [12, 69, 47], []],
    [23, 'i32.const', [12, 70, 1], ['I32']],
    [273, 'local.set', [12, 71, 5, 1], ['I32']],
    [272, 'local.get', [12, 72, 6, 7], ['I32']],
    [23, 'i32.const', [12, 73, 1], ['I32']],
    [129, 'i32.add', [12, 74, 7, 1, 8], ['I32', 'I32', 'I32']],
    [273, 'local.set', [12, 75, 3, 8], ['I32']],
    [272, 'local.get', [12, 76, 6, 7], ['I32']],
    [23, 'i32.const', [12, 77, 6], ['I32']],
    [99, 'i32.lt_s', [12, 78, 7, 6, 0], ['I32', 'I32', 'I32']],
    [9, 'br_if', [12, 79, 0, 0, 9], ['I32', 'I32', 'I32']],
    [8, 'br', [12, 80, 2, 85], []],
    [182, 'end_loop', [12, 81, 9], []],
    [181, 'end_block', [12, 82, 8], []],
    [181, 'end_block', [12, 85, 7], []],
    [272, 'local.get', [12, 86, 5, 1], ['I32']],
    [23, 'i32.const', [12, 87, 8390], ['I32']],
    [2316, 'call', [12, 88, 2, 1, 8390], ['I32', 'I32']],
    [174, 'call_post', [12, 88], []],
    [176, 'begin_block', [12, 89], []],
    [176, 'begin_block', [12, 90], []],
    [176, 'begin_block', [12, 91], []],
    [272, 'local.get', [12, 92, 1, 8064], ['I32']],
    [28, 'i64.load', [12, 93, 0, 3, 8064, 100000, 0], ['I32', 'I32', 'I32', 'I64']],
    [24, 'i64.const', [12, 94, 10000, 0], ['I64']],
    [108, 'i64.ne', [12, 95, 100000, 0, 10000, 0, 1], ['I64', 'I64', 'I32']],
    [9, 'br_if', [12, 96, 1, 0, 105], ['I32', 'I32', 'I32']],
    [181, 'end_block', [12, 105, 91], []],
    [23, 'i32.const', [12, 106, 8320], ['I32']],
    [268, 'call', [12, 107, 4, 8320], ['I32']],
    [174, 'call_post', [12, 107], []],
    [272, 'local.get', [12, 108, 1, 8064], ['I32']],
    [28, 'i64.load', [12, 109, 8, 3, 8064, 1397969667, 0],
        ['I32', 'I32', 'I32', 'I64']],
    [24, 'i64.const', [12, 110, 1397703938, 0], ['I64']],
    [108, 'i64.ne', [12, 111, 1397969667, 0, 1397703938, 0, 1], ['I64', 'I64', 'I32']],
    [9, 'br_if', [12, 112, 1, 1, 117], ['I32', 'I32', 'I32']],
    [181, 'end_block', [12, 113, 90], []],
    [181, 'end_block', [12, 117, 89], []],
    [23, 'i32.const', [12, 118, 8334], ['I32']],
    [268, 'call', [12, 119, 4, 8334], ['I32']],
    [174, 'call_post', [12, 119], []],
    [11, 'return', [12, 4294967295], []],
    [180, 'end_function', [12, 120], []],
    [174, 'call_post', [13, 140], []]
]

wasabi = Wasabi(inputType, libFunc)

for line in logSample:
    _, instr, args, types = line
    # print('PRE', args)
    args = utils.buildArgs(instr, args, types)
    # print('POST', args)

    # if wasabi.analysis.stack.size() > 0:
    #     # print(instr)
    #     print(instr, wasabi.analysis.stack[0].blocks)
    args[1] = instr
    print("%40s, %20s, %20s" % (
        args[1:3], wasabi.analysis.stack.peek(), wasabi.analysis.locals.peek()))
    # print(instr, types)
    wasabi.lowlevelHooks(instr, args)

    # print(wasabi.analysis.stack)
